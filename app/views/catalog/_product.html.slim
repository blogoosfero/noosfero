- extra_content = @plugins.dispatch(:catalog_item_extras, product).collect{ |content| instance_exec(&content) }
- extra_content_list = @plugins.dispatch(:catalog_list_item_extras, product).collect { |content| instance_exec(&content) }
- status = []
- status << 'not-available' if !product.available
- status << 'highlighted' if product.highlighted
- rank = @offset + i rescue i
- catalog_params = request.query_parameters.merge rank: rank

li class="product #{status.join ' '}" data-category-name="#{product.product_category.name rescue nil}" data-order="#{@order}" data-qualifiers-ids="#{product.qualifiers.map(&:id).join ' '}" data-rank=rank data-term="#{@query}" id="product-#{product.id}"

  ul
    li.product-image-link
      - if product.highlighted?
        = link_to image_tag(themed_path('/images/star.png'), class: 'star', alt: _('Highlighted product')), product_path(product, catalog_params)
      - if product.image
        = link_to_product_from_catalog product, url_options: catalog_params, class: 'product-big', style: "background-image: url('#{product.default_image(:big)}')"
      - else
        .no-image= _('No image')
      .catalog-item-extras= extra_content.join("\n")

    li.product-link= link_to_product_from_catalog product, url_options: catalog_params
    - if @show_supplier or product.distributed?
      li.product-supplier
        span
          = _('Offered by')
          |:&nbsp;
        - if product.distributed?
          = link_to product.supplier.short_name, product.supplier.url
        - else
          = link_to product.profile.short_name, product.profile.url

    li.product-price-line
      - unless product.discount.blank? or product.discount == 0
        span.product-discount
          span= _('from ') + price_span(product.price)
          span.product-discount-by= _('by ')
      - unless product.price.blank? or product.price == 0
        span.product-price
          = price_span product.price_with_discount, class: "product-price #{'with-discount' unless product.discount}"
          span.product-unit= _(' / ') + (product.unit ? product.unit.singular : _('unit'))
      div style=("clear: both")

    - if product.description
      li.product-description.expand-box
        span.product-description-button= _('description')
        .float-box
          .arrow
          .content= product.description

    - if product.price_described?
      li.product-price-composition.expand-box
        span.product-price-composition-button= _('price composition')
        .float-box
          .arrow
          .content
            - product.inputs.relevant_to_price.each do |i|
              .search-product-input-dots-to-price
                .search-product-input-name= i.product_category.name
                = price_span i.cost, class: 'search-product-input-price'
            - product.price_details.each do |i|
              .search-product-input-dots-to-price
                .search-product-input-name= i.name
                = price_span i.price, class: 'search-product-input-price'

    - if product.inputs.count > 0
      li.product-inputs.expand-box
        span#inputs-button= _('inputs and raw materials')
        .float-box
          .arrow
          .content
            - product.inputs.each do |i|
              div
                = _('%{amount_used} %{unit} of') % {amount_used: i.amount_used, unit: i.unit.singular} + ' ' if i.has_all_price_details?
                = i.product_category.name

    - if product.qualifiers.present?
      li.product-qualifiers
        span= _('qualifiers') if product.product_qualifiers.count > 0
        div= render 'shared/product/qualifiers', product: product

    - extra_content_list.map do |content|
      li.catalog-list-item-extras= content

    li.product-unavailable= _('product unavailable') unless product.available
